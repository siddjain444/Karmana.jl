var documenterSearchIndex = {"docs":
[{"location":"api/#The-Karmana.jl-API","page":"API","title":"The Karmana.jl API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"create_page\nindiaoutline!\nindiaoutline\nTernaryColormap","category":"page"},{"location":"api/#Karmana.create_page","page":"API","title":"Karmana.create_page","text":"create_page(paper_size, qr_code_link; landscape = automatic, naxes = 1, supertitle = \"Title\", description = \"...\", kwargs...)\n\nCreates a figure of the specified size with the specified arguments, themed for XKDR.  Applies the appropriate paper size theme (theme_a4, theme_a3, etc.)\n\nArguments\n\npaper_size: A symbol representing the desired paper size; can be :a[0/1/2/3/4].  More planned.  In the future, you may also be able to pass a tuple.\nqr_code_link: The contents of the QR code shown at the bottom left of the page.  Must be a string.\n\nKeyword arguments\n\nlandscape = automatic: Decides whether the figure should be in landscape or portrait mode.  If automatic, decides automatically.  To set this manually, set landscape = true or landscape = false.\nnaxes = 1: The number of axes to create in the central grid.  Automatically laid out.  \naxistitles = Makie.automatic: The titles for each axis.  If set to automatic, they will be the positions of the axes in the layout.\nhideaxisdecorations = true: Whether to hide the decorations (tick labels, tick marks, etc.) for each axis.\nhideaxisspines = true: Whether to hide the spines (frame lines) for each axis.\nsupertitle = \"Title\": The title of the figure, in the \"header\" gridlayout.\ndescription = \"Placeholder\": The description of the figure, in the \"footer\" gridlayout (page.description_layout[1, 1]).\npadding: The padding around the figure.  If a number, sets all sides to the same value.  If a tuple, sets the padding to (left, right, top, bottom).\naxisaspect = DataAspect(): Sets the aspect ratio of the axis.  You can set this to nothing if you want the default.\n\nReturns\n\nReturns a NamedTuple containing the following items:\n\nfigure: The Figure in which everything is plotted.\nsupertitle: The Label which serves as the figure's title.\naxis_layout: The GridLayout in which the axes are placed.\naxes: A Matrix{Union{Axis, Nothing}} which contains the axes which can be placed.  If nrows * ncols > naxes, then the remaining positions will be nothing.\ndescription_layout: The GridLayout in which the description is placed.  Has 3 columns and 1 row.  The description label is located in description_layout[1, 1], and [1, 3] is reserved for a box representing the QR code.  You can plot a legend or colorbar in description_layout[1, 2].\ndescription_label: The Label which holds the figure's description.\n\nThe items can be extracted from the named tuple using standard getproperty syntax, as in the following example:\n\npage = create_page(:a4, \"https://xkdr.org\")\npage.figure\npage.axes[i::Int, j::Int]\npage.description_layout\npage.description_label\n...\n\n\n\n\n\n","category":"function"},{"location":"api/#Karmana.indiaoutline!","page":"API","title":"Karmana.indiaoutline!","text":"indiaoutline!(admin_level::Symbol, ids::Vector, vals::Vector{<: Real}; kw_args...)\nindiaoutline!(admin_level::Symbol, dataframe::DataFrame, [id_column::Symbol], value_column::Symbol; kw_args...)\n\nPlots an outline of India, merged with the data passed in.  This data must fundamentally have two things: a column of IDs, and a column of values.  The IDs must match the IDs in the CPHS database,  and the values may be either numbers, or explicit colors.\n\nArguments\n\nadmin_level must be one of :State, :HR, or :District.  \n\nids must be a Vector{Union{Int, Missing}} or a Vector{Int}.  It and vals must have the same length.\n\nAttributes\n\nOne can set the attributes of the various plot elements by setting the values of the corresponding nested Attributes.  These are plot.State, plot.HR, plot.District, and plot.River.\n\nFor example, to set the stroke width of districts to 0.25, one would do:\n\nplot.District.strokewidth[] = 0.25\n\nThe attributes available for State, HR, and District are those of poly; the attributes available for River are those of lines.\n\nCropping the map to provided data\n\nIf the attribute crop_to_data is true, then this crops the map to the bounding box of the provided IDs only, and does not draw any other states/HRs/districts. Otherwise, all available geometries are drawn, but only the provided IDs are colored by their values; the rest of the geometries remain transparent.\n\nControlling how the data is merged\n\nYou can control the column on which data is merged by setting the merge_column and external_merge_column keyword arguments.\n\nmerge_column specifies the key with which to merge of the provided ids to the CPHS database for that admin level.\nexternal_merge_column specifies the key with which to merge the provided ids with the lower admin level geometries.  \n\nFor example, if the provided admin_level is :State, then merge_column will control the key for state_df, and external_merge_column will control the key for hr_df and district_df.\n\nTo see all available attributes and their defaults, have a look at the extended help section by running ??indiaoutline! in the REPL.\n\nExtended help\n\nAvailable attributes, and their values\n\nAvailable attributes and their defaults for MakieCore.Combined{Karmana.indiaoutline!} are: \n\n\n\n\n\n\n\n","category":"function"},{"location":"api/#Karmana.indiaoutline","page":"API","title":"Karmana.indiaoutline","text":"indiaoutline!(admin_level::Symbol, ids::Vector, vals::Vector{<: Real}; kw_args...)\nindiaoutline!(admin_level::Symbol, dataframe::DataFrame, [id_column::Symbol], value_column::Symbol; kw_args...)\n\nPlots an outline of India, merged with the data passed in.  This data must fundamentally have two things: a column of IDs, and a column of values.  The IDs must match the IDs in the CPHS database,  and the values may be either numbers, or explicit colors.\n\nArguments\n\nadmin_level must be one of :State, :HR, or :District.  \n\nids must be a Vector{Union{Int, Missing}} or a Vector{Int}.  It and vals must have the same length.\n\nAttributes\n\nOne can set the attributes of the various plot elements by setting the values of the corresponding nested Attributes.  These are plot.State, plot.HR, plot.District, and plot.River.\n\nFor example, to set the stroke width of districts to 0.25, one would do:\n\nplot.District.strokewidth[] = 0.25\n\nThe attributes available for State, HR, and District are those of poly; the attributes available for River are those of lines.\n\nCropping the map to provided data\n\nIf the attribute crop_to_data is true, then this crops the map to the bounding box of the provided IDs only, and does not draw any other states/HRs/districts. Otherwise, all available geometries are drawn, but only the provided IDs are colored by their values; the rest of the geometries remain transparent.\n\nControlling how the data is merged\n\nYou can control the column on which data is merged by setting the merge_column and external_merge_column keyword arguments.\n\nmerge_column specifies the key with which to merge of the provided ids to the CPHS database for that admin level.\nexternal_merge_column specifies the key with which to merge the provided ids with the lower admin level geometries.  \n\nFor example, if the provided admin_level is :State, then merge_column will control the key for state_df, and external_merge_column will control the key for hr_df and district_df.\n\nTo see all available attributes and their defaults, have a look at the extended help section by running ??indiaoutline! in the REPL.\n\nExtended help\n\nAvailable attributes, and their values\n\nAvailable attributes and their defaults for MakieCore.Combined{Karmana.indiaoutline} are: \n\n  District               Attributes with 7 entries:\n  label => Districts\n  names => false\n  nan_color => RGBA{Float32}(0.0,0.0,0.0,0.0)\n  strokecolor => RGB{N0f8}(0.549,0.549,0.549)\n  strokewidth => 0.2\n  visible => true\n  zlevel => 98\n  HR                     Attributes with 7 entries:\n  label => HR regions\n  names => false\n  nan_color => RGBA{Float32}(0.0,0.0,0.0,0.0)\n  strokecolor => RGBA{Float32}(0.901961,0.623529,0.0,1.0)\n  strokewidth => 0.2\n  visible => true\n  zlevel => 99\n  Legend                 Attributes with 2 entries:\n  draw => true\n  polypoints => 1\n  River                  Attributes with 5 entries:\n  color => RGB{N0f8}(0.678,0.847,0.902)\n  label => Rivers\n  linewidth => 0.2\n  visible => true\n  zlevel => 97\n  State                  Attributes with 7 entries:\n  label => States\n  names => false\n  nan_color => RGBA{Float32}(0.0,0.0,0.0,0.0)\n  strokecolor => RGB{N0f8}(0.0,0.0,0.0)\n  strokewidth => 0.2\n  visible => true\n  zlevel => 101\n  colormap               :viridis\n  colorrange             MakieCore.Automatic()\n  crop_to_data           false\n  external_merge_column  MakieCore.Automatic()\n  highclip               \"nothing\"\n  lowclip                \"nothing\"\n  merge_column           MakieCore.Automatic()\n\n\n\n\n\n","category":"function"},{"location":"api/#Karmana.TernaryColormap","page":"API","title":"Karmana.TernaryColormap","text":"struct TernaryColormap\nTernaryColormap(; xmap, ymap, zmap)\n\nRepresents a ternary colormap.  \n\nConstruct by passing three PlotUtils.ColorGradients or objects which can be converted to them (symbols, strings).\n\nCall by using the ternary colormap object (tmap) as a callable - methods include tmap(x, y, z) or tmap(Point3f(...)) or tmap((x, y, z)).  Returns an RGBAf object when called.\n\nVisualize by calling Makie.plot(tmap).\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API","title":"API","text":"Modules = [Karmana]","category":"page"},{"location":"api/#Karmana.Karmana","page":"API","title":"Karmana.Karmana","text":"Karmana\n\n(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)\n\nKarmana.jl is a library which implements utilities to munge CMIE CPHS data and visualize it.  It exposes multiple, orthogonal capabilities.\n\nKarmana is built on the Makie.jl ecosystem, including the GeoMakie.jl package.\n\nThe package is built to automate some processes to:\n\nPlot data on maps of India.\nCreate coherent and good-looking posters of plots quickly and easily.\n\nInstalling\n\nKarmana.jl is meant to work with CMIE CPHS data, and is not meant to be released to the General registry.\n\nusing Pkg\nPkg.add(url = \"https://github.com/xKDR/Karmana.jl\")\n\nTo add a specific branch or tag, provide the rev = \"branch_name\" keyword argument.\n\nSome functionality requires access to the xKDR maps database.  This can take one of two forms:\n\nDatabase credentials encoded in the environment variables \"MAPS_USER\" and \"MAPS_PASSWORD\".\nA shapefile whose location is indicated by the environment variable \"KARMANA_DISTRICT_SHAPEFILE\".\n\n\nYou can either set these before loading Karmana.jl, or call Karmana.__init__() after setting it to reset the state_df, hr_df, and district_df global variables (described below).\n\nUsage\n\nKarmana.jl implements several orthogonal functions.  For more information, please see the documentation API page, or by running ?funcname in the REPL to access Julia's help mode.\n\ncreate_page(page_size::Symbol, args...; kwargs...): Creates a Makie.jl figure which is optimized for a figure of the appropriate size, along with a \"header\" row (GridLayout) which has a logo and poster title, and a \"footer\" row (GridLayout) which has a description Label, space for a legend or colorbar, and a QR code with a customizable link.  See the documentation for more!\nindiaoutline!(admin_level::Symbol, ids, vals): A Makie.jl recipe which is able to plot at one of three admin levels (:State, :HR, and :District) - and display the other admin levels' borders.\nTernaryColormap(xgrad, ygrad, zgrad), which creates a \"ternary colormap\" that can be called on x, y, z values for which x + y + z = 1, and returns a ternary interpolated version of the color at the specified coordinates on the plane.\n\nGlobal variables\n\nAll of these variables are populated by Karmana.__init__(), and can their values can be accessed by, for example, Karmana.state_df[] (note the empty square brackets, which indicate that you're accessing the value of the Ref).\n\nstate_df::Ref{DataFrame}: A DataFrame which holds geometry data and identification keys for India's states.\nhr_df::Ref{DataFrame}: A DataFrame which holds geometry data and identification keys for India's homogeneous regions, as defined by CMIE.\ndistrict_df::Ref{DataFrame}: A DataFrame which holds geometry data and identification keys for India's districts.\nindia_rivers::Ref{ArchGDAL.IGeometry}: An ArchGDAL.IGeometry which holds the intersection of the rivers of the world with the border of India.\n\n\n\n\n\n","category":"module"},{"location":"api/#Karmana.district_df","page":"API","title":"Karmana.district_df","text":"Contains the District dataframe\n\n\n\n\n\n","category":"constant"},{"location":"api/#Karmana.hr_df","page":"API","title":"Karmana.hr_df","text":"Contains the HR dataframe\n\n\n\n\n\n","category":"constant"},{"location":"api/#Karmana.india_rivers","page":"API","title":"Karmana.india_rivers","text":"Contains an ArchGDAL.IGeometry which contains a multilinestring of the intersection of the world's rivers with India.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Karmana.state_df","page":"API","title":"Karmana.state_df","text":"Contains the State dataframe\n\n\n\n\n\n","category":"constant"},{"location":"api/#Karmana.__init__-Tuple{}","page":"API","title":"Karmana.__init__","text":"Karmana.__init__()\n\nInitializes the package by loading geometries.  This is only really relevant to the indiaoutline recipe.\n\nFirst, load the state, hr and district geometries of India from data.mayin.org, or the provided cache path. Then, compute the intersection between the world's rivers (provided by env variable) and India, or load from cache stored in scratchspace.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana._missing_in-Tuple{Any, Any}","page":"API","title":"Karmana._missing_in","text":"_missing_in(x, set)\n\nHandles the case where x is missing, which in  does not.  If x is missing and there is a missing value in set, then returns true.  If there is no missing value in set, returns false.  Otherwise, the behaviour is the same as Base.in.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana._prepare_merged_geom_dataframe-Tuple{DataFrames.DataFrame, Vararg{Symbol}}","page":"API","title":"Karmana._prepare_merged_geom_dataframe","text":"prepare_merged_geom_dataframe(df::DataFrame, hr_column_id::Symbol; capture_cols::Tuple{Symbol})\n\nPrepares a dataframe of merged geometries by grouping df by hr_column_id.   The values of each of the capture_cols in the first row of each group are also  included in the new dataframe, along with the value of  hr_column_id.   Each group in the input corresponds to a row in the output dataframe.\n\nThis method assumes that there is a geometry column in the DataFrame which contains objects which have a MultiPolygonTrait in GeoInterface.\n\nReturns a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana._set_plot_z-Tuple{Any, Real}","page":"API","title":"Karmana._set_plot_z","text":"_set_plot_z(plot, zlevel::Real)\n\nSets the plot's z-level to the provided argument, leaving the rest of the translation attributes  the same.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.create_page-2","page":"API","title":"Karmana.create_page","text":"create_page(paper_size, qr_code_link; landscape = automatic, naxes = 1, supertitle = \"Title\", description = \"...\", kwargs...)\n\nCreates a figure of the specified size with the specified arguments, themed for XKDR.  Applies the appropriate paper size theme (theme_a4, theme_a3, etc.)\n\nArguments\n\npaper_size: A symbol representing the desired paper size; can be :a[0/1/2/3/4].  More planned.  In the future, you may also be able to pass a tuple.\nqr_code_link: The contents of the QR code shown at the bottom left of the page.  Must be a string.\n\nKeyword arguments\n\nlandscape = automatic: Decides whether the figure should be in landscape or portrait mode.  If automatic, decides automatically.  To set this manually, set landscape = true or landscape = false.\nnaxes = 1: The number of axes to create in the central grid.  Automatically laid out.  \naxistitles = Makie.automatic: The titles for each axis.  If set to automatic, they will be the positions of the axes in the layout.\nhideaxisdecorations = true: Whether to hide the decorations (tick labels, tick marks, etc.) for each axis.\nhideaxisspines = true: Whether to hide the spines (frame lines) for each axis.\nsupertitle = \"Title\": The title of the figure, in the \"header\" gridlayout.\ndescription = \"Placeholder\": The description of the figure, in the \"footer\" gridlayout (page.description_layout[1, 1]).\npadding: The padding around the figure.  If a number, sets all sides to the same value.  If a tuple, sets the padding to (left, right, top, bottom).\naxisaspect = DataAspect(): Sets the aspect ratio of the axis.  You can set this to nothing if you want the default.\n\nReturns\n\nReturns a NamedTuple containing the following items:\n\nfigure: The Figure in which everything is plotted.\nsupertitle: The Label which serves as the figure's title.\naxis_layout: The GridLayout in which the axes are placed.\naxes: A Matrix{Union{Axis, Nothing}} which contains the axes which can be placed.  If nrows * ncols > naxes, then the remaining positions will be nothing.\ndescription_layout: The GridLayout in which the description is placed.  Has 3 columns and 1 row.  The description label is located in description_layout[1, 1], and [1, 3] is reserved for a box representing the QR code.  You can plot a legend or colorbar in description_layout[1, 2].\ndescription_label: The Label which holds the figure's description.\n\nThe items can be extracted from the named tuple using standard getproperty syntax, as in the following example:\n\npage = create_page(:a4, \"https://xkdr.org\")\npage.figure\npage.axes[i::Int, j::Int]\npage.description_layout\npage.description_label\n...\n\n\n\n\n\n","category":"function"},{"location":"api/#Karmana.do_geoquery-Tuple{Any, Any}","page":"API","title":"Karmana.do_geoquery","text":"do_geoquery(connection, layer; geometrycols = [\"SHAPE\"])::DataFrame\n\nPerforms a SELECT * FROM $layer operation on the database which connection points to, but all geometrycols are additionally wrapped in ST_AsBinary, which converts geometries from SQL format (which has an extra CRS indicator) to well known binary (WKB) format, which is parseable by e.g. ArchGDAL (or WellKnownGeometry.jl, which is substantially slower).\n\nWKB columns are given the suffix _wkb to differentiate them from the original columns.  \n\nResults are returned as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.get_HR_number-Tuple{String}","page":"API","title":"Karmana.get_HR_number","text":"get_HR_number(hr::Union{String, Missing})::Union{Int, Missing}\n\nExtracts the number from a string of a form \"HR ???\" and returns it. If the input is missing, then missing is returned.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.indiaoutline!-Tuple","page":"API","title":"Karmana.indiaoutline!","text":"indiaoutline!(admin_level::Symbol, ids::Vector, vals::Vector{<: Real}; kw_args...)\nindiaoutline!(admin_level::Symbol, dataframe::DataFrame, [id_column::Symbol], value_column::Symbol; kw_args...)\n\nPlots an outline of India, merged with the data passed in.  This data must fundamentally have two things: a column of IDs, and a column of values.  The IDs must match the IDs in the CPHS database,  and the values may be either numbers, or explicit colors.\n\nArguments\n\nadmin_level must be one of :State, :HR, or :District.  \n\nids must be a Vector{Union{Int, Missing}} or a Vector{Int}.  It and vals must have the same length.\n\nAttributes\n\nOne can set the attributes of the various plot elements by setting the values of the corresponding nested Attributes.  These are plot.State, plot.HR, plot.District, and plot.River.\n\nFor example, to set the stroke width of districts to 0.25, one would do:\n\nplot.District.strokewidth[] = 0.25\n\nThe attributes available for State, HR, and District are those of poly; the attributes available for River are those of lines.\n\nCropping the map to provided data\n\nIf the attribute crop_to_data is true, then this crops the map to the bounding box of the provided IDs only, and does not draw any other states/HRs/districts. Otherwise, all available geometries are drawn, but only the provided IDs are colored by their values; the rest of the geometries remain transparent.\n\nControlling how the data is merged\n\nYou can control the column on which data is merged by setting the merge_column and external_merge_column keyword arguments.\n\nmerge_column specifies the key with which to merge of the provided ids to the CPHS database for that admin level.\nexternal_merge_column specifies the key with which to merge the provided ids with the lower admin level geometries.  \n\nFor example, if the provided admin_level is :State, then merge_column will control the key for state_df, and external_merge_column will control the key for hr_df and district_df.\n\nTo see all available attributes and their defaults, have a look at the extended help section by running ??indiaoutline! in the REPL.\n\nExtended help\n\nAvailable attributes, and their values\n\nAvailable attributes and their defaults for MakieCore.Combined{Karmana.indiaoutline!} are: \n\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.indiaoutline-Tuple","page":"API","title":"Karmana.indiaoutline","text":"indiaoutline!(admin_level::Symbol, ids::Vector, vals::Vector{<: Real}; kw_args...)\nindiaoutline!(admin_level::Symbol, dataframe::DataFrame, [id_column::Symbol], value_column::Symbol; kw_args...)\n\nPlots an outline of India, merged with the data passed in.  This data must fundamentally have two things: a column of IDs, and a column of values.  The IDs must match the IDs in the CPHS database,  and the values may be either numbers, or explicit colors.\n\nArguments\n\nadmin_level must be one of :State, :HR, or :District.  \n\nids must be a Vector{Union{Int, Missing}} or a Vector{Int}.  It and vals must have the same length.\n\nAttributes\n\nOne can set the attributes of the various plot elements by setting the values of the corresponding nested Attributes.  These are plot.State, plot.HR, plot.District, and plot.River.\n\nFor example, to set the stroke width of districts to 0.25, one would do:\n\nplot.District.strokewidth[] = 0.25\n\nThe attributes available for State, HR, and District are those of poly; the attributes available for River are those of lines.\n\nCropping the map to provided data\n\nIf the attribute crop_to_data is true, then this crops the map to the bounding box of the provided IDs only, and does not draw any other states/HRs/districts. Otherwise, all available geometries are drawn, but only the provided IDs are colored by their values; the rest of the geometries remain transparent.\n\nControlling how the data is merged\n\nYou can control the column on which data is merged by setting the merge_column and external_merge_column keyword arguments.\n\nmerge_column specifies the key with which to merge of the provided ids to the CPHS database for that admin level.\nexternal_merge_column specifies the key with which to merge the provided ids with the lower admin level geometries.  \n\nFor example, if the provided admin_level is :State, then merge_column will control the key for state_df, and external_merge_column will control the key for hr_df and district_df.\n\nTo see all available attributes and their defaults, have a look at the extended help section by running ??indiaoutline! in the REPL.\n\nExtended help\n\nAvailable attributes, and their values\n\nAvailable attributes and their defaults for MakieCore.Combined{Karmana.indiaoutline} are: \n\n  District               Attributes with 7 entries:\n  label => Districts\n  names => false\n  nan_color => RGBA{Float32}(0.0,0.0,0.0,0.0)\n  strokecolor => RGB{N0f8}(0.549,0.549,0.549)\n  strokewidth => 0.2\n  visible => true\n  zlevel => 98\n  HR                     Attributes with 7 entries:\n  label => HR regions\n  names => false\n  nan_color => RGBA{Float32}(0.0,0.0,0.0,0.0)\n  strokecolor => RGBA{Float32}(0.901961,0.623529,0.0,1.0)\n  strokewidth => 0.2\n  visible => true\n  zlevel => 99\n  Legend                 Attributes with 2 entries:\n  draw => true\n  polypoints => 1\n  River                  Attributes with 5 entries:\n  color => RGB{N0f8}(0.678,0.847,0.902)\n  label => Rivers\n  linewidth => 0.2\n  visible => true\n  zlevel => 97\n  State                  Attributes with 7 entries:\n  label => States\n  names => false\n  nan_color => RGBA{Float32}(0.0,0.0,0.0,0.0)\n  strokecolor => RGB{N0f8}(0.0,0.0,0.0)\n  strokewidth => 0.2\n  visible => true\n  zlevel => 101\n  colormap               :viridis\n  colorrange             MakieCore.Automatic()\n  crop_to_data           false\n  external_merge_column  MakieCore.Automatic()\n  highclip               \"nothing\"\n  lowclip                \"nothing\"\n  merge_column           MakieCore.Automatic()\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.latlong_string_to_points-Tuple{AbstractString}","page":"API","title":"Karmana.latlong_string_to_points","text":"latlong_string_to_points(latlong_string)\n\nParses a string of the form lat1,long1 : lat2,long2 : lat3,long3 : ...  and returns a Vector of Point2e which define points as (long, lat).  \n\nIs robust to cutoff errors and other potential issues.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.maps_db_connection","page":"API","title":"Karmana.maps_db_connection","text":"maps_db_connection(user = ENV[\"MAPS_USER\"], password = ENV[\"MAPS_PASSWORD\"])::DBInterface.Connection\n\nReturns a connection to the maps database on data.mayin.org, which must be closed by DBInterface.close!.\n\n\n\n\n\n","category":"function"},{"location":"api/#Karmana.merge_polys-Tuple{AbstractVector}","page":"API","title":"Karmana.merge_polys","text":"merge_polys(polys::AbstractVector{<: Union{Polygon, MultiPolygon}})\n\nMerges a vector of polygons into a single MultiPolygon using ArchGDAL.union.\n\nReturns an ArchGDAL geometry.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.nearest_paper_size-Tuple{Real, Real}","page":"API","title":"Karmana.nearest_paper_size","text":"nearest_paper_size(width::Real, height::Real)::Symbol\n\nReturns the closest paper size to the provided size, which must be a 2-tuple.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.points_weights-Tuple{Any, Any}","page":"API","title":"Karmana.points_weights","text":"points_weights(latlong_strings::Vector{:< AbstractString}, costs::Vector{<: Real})\n\nParses strings of the form lat1,long1 : lat2,long2 : lat3,long3 : ...  and returns a Vector of Point2e which define points as (long, lat), as well as a vector of weights per point.  If the string has more than one point defined,  the weight is spread across all n points such that each point has a weight of cost[i]/n.\n\nReturns (::Vector{Point2e}, ::Vector{<: Real}).\n\nnote: Note\nThis format of data is often found in CMIE capex location data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.prepare_merged_river_geom-Tuple{Any, Any}","page":"API","title":"Karmana.prepare_merged_river_geom","text":"prepare_merged_river_geom(shapefile_path, mask_poly)\n\nUses ArchGDAL to prepare a multilinestring which shows river paths within India.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.prepare_page-Tuple{Union{Symbol, Tuple{var\"#s100\", var\"#s100\"} where var\"#s100\"<:Real}, String}","page":"API","title":"Karmana.prepare_page","text":"prepare_page(\n    paper_size::Union{Symbol, NTuple{2, <: Real}},\n    qr_code_contents::String;\n    landscape = false,\n    padding = 3,\n    logo = rotr90(FileIO.load(assetpath(\"logos\", \"XKDR_Logomark_RGB_White.jpg\"))),\n    logo_height = 40,\n    logo_padding = 5,\n    qr_code_height = 60,\n    qr_code_padding = 10,\n)\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.rgb_to_cmyk_pdf-Tuple{AbstractString, AbstractString}","page":"API","title":"Karmana.rgb_to_cmyk_pdf","text":"rgb_to_cmyk_pdf(source_file::AbstractString, dest_file::AbstractString)\n\nRuns Ghostscript on source_file to convert its color schema from RGB to CMYK, and stores the result in dest_file.\n\nThis works well when preparing a PDF for printing, since many printer drivers don't perform the conversion as well as Ghostscript does.  You might see a  green tint on black when printing in color; this ameliorates that to a large degree.\n\nnote: Note\nConverting from RGB to CMYK is a lossy operation, since CMYK is a strict subset of RGB.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.searchsortednearest-Tuple{Any, Any}","page":"API","title":"Karmana.searchsortednearest","text":"searchsortednearest(a, x)\n\nReturns the index of the nearest element to x in a. a must be a sorted array, and its elements must be mathematically interoperable with x.  \n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.shape_wkb_to_module_geom!-Tuple{Module, DataFrames.DataFrame}","page":"API","title":"Karmana.shape_wkb_to_module_geom!","text":"shape_wkb_to_module_geom!(mod::Module, table::DataFrame; new_colname = :geometry, wkb_colname = :SHAPE_wkb)\n\nConverts the geometries in old_colname (in WKB format as eltype(old_colanme) = Vector{UInt8}) into geometries of the  provided module mod.  This goes through ArchGDAL instead of being pure-Julia with WellKnownGeometry, since that's faster.\n\n\n\n\n\n","category":"method"},{"location":"api/#Karmana.state_hr_district_dfs-Tuple{}","page":"API","title":"Karmana.state_hr_district_dfs","text":"state_hr_district_dfs()\n\nA wrapper function which materializes the state, HR, and district dataframes in Julia, by connecting to the maps database of data.mayin.org.  \n\nReturns 3 DataFrames (state_table, hr_table, district_table) which all have columns :geometry populated by GeometryBasics geometry, which is suitable for plotting.\n\n\n\n\n\n","category":"method"},{"location":"#Karmana","page":"Home","title":"Karmana","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Karmana.jl is a library which implements utilities to munge CMIE CPHS data and visualize it.  It exposes multiple, orthogonal capabilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Karmana is built on the Makie.jl ecosystem, including the GeoMakie.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package is built to automate some processes to:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Plot data on maps of India.\nCreate coherent and good-looking posters of plots quickly and easily.","category":"page"},{"location":"#Installing","page":"Home","title":"Installing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Karmana.jl is meant to work with CMIE CPHS data, and is not meant to be released to the General registry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url = \"https://github.com/xKDR/Karmana.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To add a specific branch or tag, provide the rev = \"branch_name\" keyword argument.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some functionality requires access to the xKDR maps database.  This can take one of two forms:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Database credentials encoded in the environment variables \"MAPS_USER\" and \"MAPS_PASSWORD\".\nA shapefile whose location is indicated by the environment variable \"KARMANA_DISTRICT_SHAPEFILE\".\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can either set these before loading Karmana.jl, or call Karmana.__init__() after setting it to reset the state_df, hr_df, and district_df global variables (described below).","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Karmana.jl implements several orthogonal functions.  For more information, please see the documentation API page, or by running ?funcname in the REPL to access Julia's help mode.","category":"page"},{"location":"","page":"Home","title":"Home","text":"create_page(page_size::Symbol, args...; kwargs...): Creates a Makie.jl figure which is optimized for a figure of the appropriate size, along with a \"header\" row (GridLayout) which has a logo and poster title, and a \"footer\" row (GridLayout) which has a description Label, space for a legend or colorbar, and a QR code with a customizable link.  See the documentation for more!\nindiaoutline!(admin_level::Symbol, ids, vals): A Makie.jl recipe which is able to plot at one of three admin levels (:State, :HR, and :District) - and display the other admin levels' borders.\nTernaryColormap(xgrad, ygrad, zgrad), which creates a \"ternary colormap\" that can be called on x, y, z values for which x + y + z = 1, and returns a ternary interpolated version of the color at the specified coordinates on the plane.","category":"page"},{"location":"#Global-variables","page":"Home","title":"Global variables","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All of these variables are populated by Karmana.__init__(), and can their values can be accessed by, for example, Karmana.state_df[] (note the empty square brackets, which indicate that you're accessing the value of the Ref).","category":"page"},{"location":"","page":"Home","title":"Home","text":"state_df::Ref{DataFrame}: A DataFrame which holds geometry data and identification keys for India's states.\nhr_df::Ref{DataFrame}: A DataFrame which holds geometry data and identification keys for India's homogeneous regions, as defined by CMIE.\ndistrict_df::Ref{DataFrame}: A DataFrame which holds geometry data and identification keys for India's districts.\nindia_rivers::Ref{ArchGDAL.IGeometry}: An ArchGDAL.IGeometry which holds the intersection of the rivers of the world with the border of India.","category":"page"}]
}
